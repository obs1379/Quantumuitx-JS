/**********************************************
 * Quantumult X 节点风险检测/地理信息脚本
 * 说明：
 *  1. 通过 $environment.node 获取当前节点名
 *  2. 通过在 URL 后附加随机参数，避免短时间内缓存
 *  3. 使用 $task.fetch 替代 $httpClient
 **********************************************/

// 从 QX 环境中获取节点名称（面板中会自动传入）
const nodeName = $environment.node || "当前节点";

// 为了避免缓存，给请求 URL 加上随机参数
const baseIPApi = "http://ip-api.com/json/";
const randomSuffix = "?_t=" + new Date().getTime();

// 拼出最终查询 IP 地理信息的 URL
const geoUrl = baseIPApi + randomSuffix;

// scamalytics 网址
const base_url = "https://scamalytics.com/ip/";

// 封装 GET 请求（使用 $task.fetch）
function httpGet(options, callback) {
  $task.fetch({
    url: options.url,
    method: "GET",
    // 指定当前节点，以确保请求走被检测的节点
    node: nodeName
  }).then(
    (resp) => callback(null, resp, resp.body),
    (err) => callback(err.error, null, null)
  );
}

// ====== 开始执行查询逻辑 ======
main();

function main() {
  httpGet({ url: geoUrl }, (error, response, data) => {
    if (error) {
      // 查询失败
      let message = wrapMessage("🔴 查询超时 / 失败");
      $done({ title: "地理位置查询", htmlMessage: message });
      return;
    }

    // 解析 IP-API 返回
    let ipObj;
    try {
      ipObj = JSON.parse(data);
    } catch (e) {
      let message = wrapMessage("🔴 JSON 解析错误");
      $done({ title: "地理位置查询", htmlMessage: message });
      return;
    }

    // 先拼出地理信息
    let message = json2info(ipObj);

    // 继续查 scamalytics
    const ip = ipObj.query; // 远端IP
    const scamUrl = base_url + ip + randomSuffix;

    httpGet({ url: scamUrl }, (error2, resp2, scamData) => {
      if (error2) {
        let msg = wrapMessage("🔴 查询超时 / 失败");
        $done({ title: "地理位置查询", htmlMessage: msg });
        return;
      }

      // 拼接欺诈指数信息
      message += Display(scamData);
      message += "------------------------------</br>";
      message += `<font color=#6959CD><b>节点</b> ➟ ${nodeName}</font>`;

      // 整体美化
      message = `<p style="text-align: center; font-family: -apple-system; font-size: large; font-weight: thin">${message}</p>`;
      $done({ title: `${nodeName} 地理位置查询`, htmlMessage: message });
    });
  });
}

// =========== 工具函数 ===========

// 美化错误消息
function wrapMessage(msg) {
  return `<p style="text-align: center; font-family: -apple-system; font-size: large; font-weight: bold;">${msg}</p>`;
}

// ip-api 返回的关键字段
const paras = ["query", "as", "org", "isp", "countryCode", "city", "lon", "lat"];
const paran = [
  "远端IP地址",
  "远端IP ASN",
  "ASN所属机构",
  "远端ISP",
  "远端IP地区",
  "远端IP城市",
  "远端经度",
  "远端纬度"
];

// 处理 IP-API 返回的 JSON 对象
function json2info(obj) {
  let res = "-------------------------------";
  for (let i = 0; i < paras.length; i++) {
    if (obj[paras[i]]) {
      // 如果是 countryCode，就带上国旗
      if (paras[i] === "countryCode") {
        let cc = obj[paras[i]].toUpperCase();
        obj[paras[i]] = obj[paras[i]] + " ⟦" + (flags.get(cc) || "") + "⟧";
      }
      res += `</br><b><font color="">${paran[i]}</font> : </b><font color="">${obj[paras[i]]}</font></br>`;
    }
  }
  return res;
}

// 从 scamalytics 页面内容中提取欺诈指数和风险等级
function Display(content) {
  let score = getValue(content, `"score":`);
  let risk  = getValue(content, `"risk":`);

  let scoreMsg = `</br><b><font color="">欺诈指数 </font> : </b><font color="">${score}</font></br>`;
  let riskMsg  = `</br><b><font color="">风险等级 </font> : </b><font color="">${E2C(risk)}</font></br>`;
  return scoreMsg + riskMsg;
}

// 从文本里根据 key 取值
function getValue(str, key) {
  let idx = str.indexOf(key);
  if (idx === -1) return "NA";
  let sub = str.substring(idx + key.length);
  // 按换行分割
  sub = sub.split("\n")[0];
  // 去除 " 或 ,
  return sub.replace(/"|,/g, "").trim();
}

// 转换英文风险等级
function E2C(level) {
  if (level.includes("very high")) return "极高风险 🔴";
  if (level.includes("high"))      return "高风险 ⚠️";
  if (level.includes("medium"))    return "中风险 🟡";
  if (level.includes("low"))       return "低风险 ✅";
  return "NA";
}

// 常用国旗映射表
const flags = new Map([
  ["AC","🇦🇨"],["AE","🇦🇪"],["AF","🇦🇫"],["AI","🇦🇮"],["AL","🇦🇱"],
  ["AM","🇦🇲"],["AQ","🇦🇶"],["AR","🇦🇷"],["AS","🇦🇸"],["AT","🇦🇹"],
  ["AU","🇦🇺"],["AW","🇦🇼"],["AX","🇦🇽"],["AZ","🇦🇿"],["BA","🇧🇦"],
  ["BB","🇧🇧"],["BD","🇧🇩"],["BE","🇧🇪"],["BF","🇧🇫"],["BG","🇧🇬"],
  ["BH","🇧🇭"],["BI","🇧🇮"],["BJ","🇧🇯"],["BM","🇧🇲"],["BN","🇧🇳"],
  ["BO","🇧🇴"],["BR","🇧🇷"],["BS","🇧🇸"],["BT","🇧🇹"],["BV","🇧🇻"],
  ["BW","🇧🇼"],["BY","🇧🇾"],["BZ","🇧🇿"],["CA","🇨🇦"],["CF","🇨🇫"],
  ["CH","🇨🇭"],["CK","🇨🇰"],["CL","🇨🇱"],["CM","🇨🇲"],["CN","🇨🇳"],
  ["CO","🇨🇴"],["CP","🇨🇵"],["CR","🇨🇷"],["CU","🇨🇺"],["CV","🇨🇻"],
  ["CW","🇨🇼"],["CX","🇨🇽"],["CY","🇨🇾"],["CZ","🇨🇿"],["DE","🇩🇪"],
  ["DG","🇩🇬"],["DJ","🇩🇯"],["DK","🇩🇰"],["DM","🇩🇲"],["DO","🇩🇴"],
  ["DZ","🇩🇿"],["EA","🇪🇦"],["EC","🇪🇨"],["EE","🇪🇪"],["EG","🇪🇬"],
  ["EH","🇪🇭"],["ER","🇪🇷"],["ES","🇪🇸"],["ET","🇪🇹"],["EU","🇪🇺"],
  ["FI","🇫🇮"],["FJ","🇫🇯"],["FK","🇫🇰"],["FM","🇫🇲"],["FO","🇫🇴"],
  ["FR","🇫🇷"],["GA","🇬🇦"],["GB","🇬🇧"],["HK","🇭🇰"],["HU","🇭🇺"],
  ["ID","🇮🇩"],["IE","🇮🇪"],["IL","🇮🇱"],["IM","🇮🇲"],["IN","🇮🇳"],
  ["IS","🇮🇸"],["IT","🇮🇹"],["JP","🇯🇵"],["KR","🇰🇷"],["LU","🇱🇺"],
  ["MO","🇲🇴"],["MX","🇲🇽"],["MY","🇲🇾"],["NL","🇳🇱"],["PH","🇵🇭"],
  ["RO","🇷🇴"],["RS","🇷🇸"],["RU","🇷🇺"],["RW","🇷🇼"],["SA","🇸🇦"],
  ["SB","🇸🇧"],["SC","🇸🇨"],["SD","🇸🇩"],["SE","🇸🇪"],["SG","🇸🇬"],
  ["TH","🇹🇭"],["TN","🇹🇳"],["TO","🇹🇴"],["TR","🇹🇷"],["TV","🇹🇻"],
  ["TW","🇨🇳"],["UK","🇬🇧"],["UM","🇺🇲"],["US","🇺🇸"],["UY","🇺🇾"],
  ["UZ","🇺🇿"],["VA","🇻🇦"],["VE","🇻🇪"],["VG","🇻🇬"],["VI","🇻🇮"],
  ["VN","🇻🇳"],["ZA","🇿🇦"]
]);
